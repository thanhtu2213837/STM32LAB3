
STM32LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800268c  0800268c  0000368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b0  080026b0  00004074  2**0
                  CONTENTS
  4 .ARM          00000000  080026b0  080026b0  00004074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b0  080026b0  00004074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b0  080026b0  000036b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b4  080026b4  000036b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080026b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000074  0800272c  00004074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800272c  0000412c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085d9  00000000  00000000  0000409d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c85  00000000  00000000  0000c676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0000e300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b1  00000000  00000000  0000ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db6  00000000  00000000  0000f4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c12d  00000000  00000000  0002627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825a8  00000000  00000000  000323ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4954  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000b4998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000045  00000000  00000000  000b71a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002674 	.word	0x08002674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002674 	.word	0x08002674

0800014c <subKeyProcess>:


int TimeOutForKeyPress =  2000;
int button1_flag[N0_OF_BUTTONS] = {0};

void subKeyProcess(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TODO
	button1_flag[index] = 1;
 8000154:	4a04      	ldr	r2, [pc, #16]	@ (8000168 <subKeyProcess+0x1c>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2101      	movs	r1, #1
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800015e:	bf00      	nop
 8000160:	370c      	adds	r7, #12
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	20000090 	.word	0x20000090

0800016c <isButtonPressed>:
int isButtonPressed(int index){
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	6078      	str	r0, [r7, #4]
	if(button1_flag[index] == 1){
 8000174:	4a09      	ldr	r2, [pc, #36]	@ (800019c <isButtonPressed+0x30>)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800017c:	2b01      	cmp	r3, #1
 800017e:	d106      	bne.n	800018e <isButtonPressed+0x22>
		button1_flag[index] = 0;
 8000180:	4a06      	ldr	r2, [pc, #24]	@ (800019c <isButtonPressed+0x30>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2100      	movs	r1, #0
 8000186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800018a:	2301      	movs	r3, #1
 800018c:	e000      	b.n	8000190 <isButtonPressed+0x24>
	}
	return 0;
 800018e:	2300      	movs	r3, #0
}
 8000190:	4618      	mov	r0, r3
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i ++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e069      	b.n	8000280 <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a38      	ldr	r2, [pc, #224]	@ (8000290 <getKeyInput+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4937      	ldr	r1, [pc, #220]	@ (8000294 <getKeyInput+0xf4>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a36      	ldr	r2, [pc, #216]	@ (8000298 <getKeyInput+0xf8>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4932      	ldr	r1, [pc, #200]	@ (8000290 <getKeyInput+0xf0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin<<i);
 80001cc:	2202      	movs	r2, #2
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	fa02 f303 	lsl.w	r3, r2, r3
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	4830      	ldr	r0, [pc, #192]	@ (800029c <getKeyInput+0xfc>)
 80001da:	f001 fa1d 	bl	8001618 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000298 <getKeyInput+0xf8>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a29      	ldr	r2, [pc, #164]	@ (8000290 <getKeyInput+0xf0>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4929      	ldr	r1, [pc, #164]	@ (8000298 <getKeyInput+0xf8>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d13d      	bne.n	800027a <getKeyInput+0xda>
 80001fe:	4a24      	ldr	r2, [pc, #144]	@ (8000290 <getKeyInput+0xf0>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4923      	ldr	r1, [pc, #140]	@ (8000294 <getKeyInput+0xf4>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d133      	bne.n	800027a <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a20      	ldr	r2, [pc, #128]	@ (8000294 <getKeyInput+0xf4>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	4921      	ldr	r1, [pc, #132]	@ (80002a0 <getKeyInput+0x100>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d014      	beq.n	8000250 <getKeyInput+0xb0>
			  KeyReg3[i] = KeyReg2[i];
 8000226:	4a1b      	ldr	r2, [pc, #108]	@ (8000294 <getKeyInput+0xf4>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491c      	ldr	r1, [pc, #112]	@ (80002a0 <getKeyInput+0x100>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			  if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a1a      	ldr	r2, [pc, #104]	@ (80002a0 <getKeyInput+0x100>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d11b      	bne.n	800027a <getKeyInput+0xda>
				TimeOutForKeyPress = 200;
 8000242:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <getKeyInput+0x104>)
 8000244:	22c8      	movs	r2, #200	@ 0xc8
 8000246:	601a      	str	r2, [r3, #0]
				subKeyProcess(i);
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f7ff ff7f 	bl	800014c <subKeyProcess>
 800024e:	e014      	b.n	800027a <getKeyInput+0xda>
			  }
			}else{
			   TimeOutForKeyPress --;
 8000250:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <getKeyInput+0x104>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	3b01      	subs	r3, #1
 8000256:	4a13      	ldr	r2, [pc, #76]	@ (80002a4 <getKeyInput+0x104>)
 8000258:	6013      	str	r3, [r2, #0]
				if (TimeOutForKeyPress == 0){
 800025a:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <getKeyInput+0x104>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10b      	bne.n	800027a <getKeyInput+0xda>
					TimeOutForKeyPress = 25;
 8000262:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <getKeyInput+0x104>)
 8000264:	2219      	movs	r2, #25
 8000266:	601a      	str	r2, [r3, #0]
					if(KeyReg3[i] == PRESSED_STATE){
 8000268:	4a0d      	ldr	r2, [pc, #52]	@ (80002a0 <getKeyInput+0x100>)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0xda>
						subKeyProcess(i);
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f7ff ff69 	bl	800014c <subKeyProcess>
	for(int i = 0; i < 3; i ++){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd92      	ble.n	80001ac <getKeyInput+0xc>
					}
				}
			}
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000000c 	.word	0x2000000c
 8000294:	20000018 	.word	0x20000018
 8000298:	20000000 	.word	0x20000000
 800029c:	40010800 	.word	0x40010800
 80002a0:	20000024 	.word	0x20000024
 80002a4:	20000030 	.word	0x20000030

080002a8 <display7SEG>:
#include "display.h"
#include "display.h"
#include "main.h"
#include "all.h"
unsigned char NUM[] = {0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90};
void display7SEG (int number){
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	GPIOB -> ODR = NUM[number];
 80002b0:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <display7SEG+0x20>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4413      	add	r3, r2
 80002b6:	781a      	ldrb	r2, [r3, #0]
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <display7SEG+0x24>)
 80002ba:	60da      	str	r2, [r3, #12]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	20000034 	.word	0x20000034
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <update7SEG>:
int value1 = 100;
int value2 = 100;
int index_led = 0;
int led_buffer [4] = {5,6,7,8};
 void update7SEG (int index){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	switch (index){
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b03      	cmp	r3, #3
 80002dc:	f200 8084 	bhi.w	80003e8 <update7SEG+0x118>
 80002e0:	a201      	add	r2, pc, #4	@ (adr r2, 80002e8 <update7SEG+0x18>)
 80002e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e6:	bf00      	nop
 80002e8:	080002f9 	.word	0x080002f9
 80002ec:	08000335 	.word	0x08000335
 80002f0:	08000371 	.word	0x08000371
 80002f4:	080003ad 	.word	0x080003ad
	case 0:
		// Display the first 7 SEG with led_buffer [0]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002fe:	483d      	ldr	r0, [pc, #244]	@ (80003f4 <update7SEG+0x124>)
 8000300:	f001 f9a1 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030a:	483a      	ldr	r0, [pc, #232]	@ (80003f4 <update7SEG+0x124>)
 800030c:	f001 f99b 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000316:	4837      	ldr	r0, [pc, #220]	@ (80003f4 <update7SEG+0x124>)
 8000318:	f001 f995 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000322:	4834      	ldr	r0, [pc, #208]	@ (80003f4 <update7SEG+0x124>)
 8000324:	f001 f98f 	bl	8001646 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000328:	4b33      	ldr	r3, [pc, #204]	@ (80003f8 <update7SEG+0x128>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffbb 	bl	80002a8 <display7SEG>
		break ;
 8000332:	e05a      	b.n	80003ea <update7SEG+0x11a>
	case 1:
		// Display the second 7 SEG with led_buffer [1]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800033a:	482e      	ldr	r0, [pc, #184]	@ (80003f4 <update7SEG+0x124>)
 800033c:	f001 f983 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000346:	482b      	ldr	r0, [pc, #172]	@ (80003f4 <update7SEG+0x124>)
 8000348:	f001 f97d 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 800034c:	2201      	movs	r2, #1
 800034e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000352:	4828      	ldr	r0, [pc, #160]	@ (80003f4 <update7SEG+0x124>)
 8000354:	f001 f977 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 8000358:	2201      	movs	r2, #1
 800035a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800035e:	4825      	ldr	r0, [pc, #148]	@ (80003f4 <update7SEG+0x124>)
 8000360:	f001 f971 	bl	8001646 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000364:	4b24      	ldr	r3, [pc, #144]	@ (80003f8 <update7SEG+0x128>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff9d 	bl	80002a8 <display7SEG>
		break ;
 800036e:	e03c      	b.n	80003ea <update7SEG+0x11a>
	case 2:
		// Display the third 7 SEG with led_buffer [2]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000376:	481f      	ldr	r0, [pc, #124]	@ (80003f4 <update7SEG+0x124>)
 8000378:	f001 f965 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 800037c:	2201      	movs	r2, #1
 800037e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000382:	481c      	ldr	r0, [pc, #112]	@ (80003f4 <update7SEG+0x124>)
 8000384:	f001 f95f 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800038e:	4819      	ldr	r0, [pc, #100]	@ (80003f4 <update7SEG+0x124>)
 8000390:	f001 f959 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	4816      	ldr	r0, [pc, #88]	@ (80003f4 <update7SEG+0x124>)
 800039c:	f001 f953 	bl	8001646 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <update7SEG+0x128>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff7f 	bl	80002a8 <display7SEG>

		break ;
 80003aa:	e01e      	b.n	80003ea <update7SEG+0x11a>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]

		HAL_GPIO_WritePin(EN_0_GPIO_Port, EN_0_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003b2:	4810      	ldr	r0, [pc, #64]	@ (80003f4 <update7SEG+0x124>)
 80003b4:	f001 f947 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, SET);
 80003b8:	2201      	movs	r2, #1
 80003ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003be:	480d      	ldr	r0, [pc, #52]	@ (80003f4 <update7SEG+0x124>)
 80003c0:	f001 f941 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ca:	480a      	ldr	r0, [pc, #40]	@ (80003f4 <update7SEG+0x124>)
 80003cc:	f001 f93b 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003d6:	4807      	ldr	r0, [pc, #28]	@ (80003f4 <update7SEG+0x124>)
 80003d8:	f001 f935 	bl	8001646 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80003dc:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <update7SEG+0x128>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff61 	bl	80002a8 <display7SEG>
		break ;
 80003e6:	e000      	b.n	80003ea <update7SEG+0x11a>
	default :
		break ;
 80003e8:	bf00      	nop
	}
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800
 80003f8:	20000048 	.word	0x20000048

080003fc <update7SegBuffer>:
void update7SegBuffer(){
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
//	value1 = timer_counter[0];
	led_buffer[0] = value1/1000;
 8000400:	4b20      	ldr	r3, [pc, #128]	@ (8000484 <update7SegBuffer+0x88>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <update7SegBuffer+0x8c>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1192      	asrs	r2, r2, #6
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a1e      	ldr	r2, [pc, #120]	@ (800048c <update7SegBuffer+0x90>)
 8000412:	6013      	str	r3, [r2, #0]
	led_buffer[1] = (value1%1000)/100;
 8000414:	4b1b      	ldr	r3, [pc, #108]	@ (8000484 <update7SegBuffer+0x88>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <update7SegBuffer+0x8c>)
 800041a:	fb83 1302 	smull	r1, r3, r3, r2
 800041e:	1199      	asrs	r1, r3, #6
 8000420:	17d3      	asrs	r3, r2, #31
 8000422:	1acb      	subs	r3, r1, r3
 8000424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000428:	fb01 f303 	mul.w	r3, r1, r3
 800042c:	1ad3      	subs	r3, r2, r3
 800042e:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <update7SegBuffer+0x94>)
 8000430:	fb82 1203 	smull	r1, r2, r2, r3
 8000434:	1152      	asrs	r2, r2, #5
 8000436:	17db      	asrs	r3, r3, #31
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	4a14      	ldr	r2, [pc, #80]	@ (800048c <update7SegBuffer+0x90>)
 800043c:	6053      	str	r3, [r2, #4]
	led_buffer[2] = value2/1000;
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <update7SegBuffer+0x98>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a11      	ldr	r2, [pc, #68]	@ (8000488 <update7SegBuffer+0x8c>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1192      	asrs	r2, r2, #6
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4a0f      	ldr	r2, [pc, #60]	@ (800048c <update7SegBuffer+0x90>)
 8000450:	6093      	str	r3, [r2, #8]
	led_buffer[3] = (value2%1000)/100;
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <update7SegBuffer+0x98>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <update7SegBuffer+0x8c>)
 8000458:	fb83 1302 	smull	r1, r3, r3, r2
 800045c:	1199      	asrs	r1, r3, #6
 800045e:	17d3      	asrs	r3, r2, #31
 8000460:	1acb      	subs	r3, r1, r3
 8000462:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000466:	fb01 f303 	mul.w	r3, r1, r3
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	4a08      	ldr	r2, [pc, #32]	@ (8000490 <update7SegBuffer+0x94>)
 800046e:	fb82 1203 	smull	r1, r2, r2, r3
 8000472:	1152      	asrs	r2, r2, #5
 8000474:	17db      	asrs	r3, r3, #31
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	4a04      	ldr	r2, [pc, #16]	@ (800048c <update7SegBuffer+0x90>)
 800047a:	60d3      	str	r3, [r2, #12]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr
 8000484:	20000040 	.word	0x20000040
 8000488:	10624dd3 	.word	0x10624dd3
 800048c:	20000048 	.word	0x20000048
 8000490:	51eb851f 	.word	0x51eb851f
 8000494:	20000044 	.word	0x20000044

08000498 <clearAllLight>:
void clearAllLight(){
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2110      	movs	r1, #16
 80004a0:	480f      	ldr	r0, [pc, #60]	@ (80004e0 <clearAllLight+0x48>)
 80004a2:	f001 f8d0 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	480d      	ldr	r0, [pc, #52]	@ (80004e0 <clearAllLight+0x48>)
 80004ac:	f001 f8cb 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2140      	movs	r1, #64	@ 0x40
 80004b4:	480a      	ldr	r0, [pc, #40]	@ (80004e0 <clearAllLight+0x48>)
 80004b6:	f001 f8c6 	bl	8001646 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2180      	movs	r1, #128	@ 0x80
 80004be:	4808      	ldr	r0, [pc, #32]	@ (80004e0 <clearAllLight+0x48>)
 80004c0:	f001 f8c1 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ca:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <clearAllLight+0x48>)
 80004cc:	f001 f8bb 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004d6:	4802      	ldr	r0, [pc, #8]	@ (80004e0 <clearAllLight+0x48>)
 80004d8:	f001 f8b5 	bl	8001646 <HAL_GPIO_WritePin>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40010800 	.word	0x40010800

080004e4 <turnOnAllLight>:
void turnOnAllLight(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2110      	movs	r1, #16
 80004ec:	480f      	ldr	r0, [pc, #60]	@ (800052c <turnOnAllLight+0x48>)
 80004ee:	f001 f8aa 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2120      	movs	r1, #32
 80004f6:	480d      	ldr	r0, [pc, #52]	@ (800052c <turnOnAllLight+0x48>)
 80004f8:	f001 f8a5 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2140      	movs	r1, #64	@ 0x40
 8000500:	480a      	ldr	r0, [pc, #40]	@ (800052c <turnOnAllLight+0x48>)
 8000502:	f001 f8a0 	bl	8001646 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2180      	movs	r1, #128	@ 0x80
 800050a:	4808      	ldr	r0, [pc, #32]	@ (800052c <turnOnAllLight+0x48>)
 800050c:	f001 f89b 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <turnOnAllLight+0x48>)
 8000518:	f001 f895 	bl	8001646 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000522:	4802      	ldr	r0, [pc, #8]	@ (800052c <turnOnAllLight+0x48>)
 8000524:	f001 f88f 	bl	8001646 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40010800 	.word	0x40010800

08000530 <FsmForTrafficLight>:
int timeForYellow = 2000;
int timeForRed = 5000;
int timeForGreen_tmp;
int timeForYellow_tmp;
int timeForRed_tmp;
void FsmForTrafficLight (void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	switch (status){
 8000534:	4b9a      	ldr	r3, [pc, #616]	@ (80007a0 <FsmForTrafficLight+0x270>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	3b01      	subs	r3, #1
 800053a:	2b13      	cmp	r3, #19
 800053c:	f200 82ba 	bhi.w	8000ab4 <FsmForTrafficLight+0x584>
 8000540:	a201      	add	r2, pc, #4	@ (adr r2, 8000548 <FsmForTrafficLight+0x18>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	08000599 	.word	0x08000599
 800054c:	080005ad 	.word	0x080005ad
 8000550:	08000659 	.word	0x08000659
 8000554:	080006f3 	.word	0x080006f3
 8000558:	080007c5 	.word	0x080007c5
 800055c:	08000ab5 	.word	0x08000ab5
 8000560:	08000ab5 	.word	0x08000ab5
 8000564:	08000ab5 	.word	0x08000ab5
 8000568:	08000ab5 	.word	0x08000ab5
 800056c:	0800085f 	.word	0x0800085f
 8000570:	080008f9 	.word	0x080008f9
 8000574:	08000995 	.word	0x08000995
 8000578:	08000ab5 	.word	0x08000ab5
 800057c:	08000ab5 	.word	0x08000ab5
 8000580:	08000ab5 	.word	0x08000ab5
 8000584:	08000ab5 	.word	0x08000ab5
 8000588:	08000ab5 	.word	0x08000ab5
 800058c:	08000ab5 	.word	0x08000ab5
 8000590:	08000ab5 	.word	0x08000ab5
 8000594:	08000a91 	.word	0x08000a91
	case INIT:
		status = RED1_GREEN2;
 8000598:	4b81      	ldr	r3, [pc, #516]	@ (80007a0 <FsmForTrafficLight+0x270>)
 800059a:	2202      	movs	r2, #2
 800059c:	601a      	str	r2, [r3, #0]
		setTimer(timeForGreen, 0);
 800059e:	4b81      	ldr	r3, [pc, #516]	@ (80007a4 <FsmForTrafficLight+0x274>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fc45 	bl	8000e34 <setTimer>
		break;
 80005aa:	e294      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
	case RED1_GREEN2:
		value2 = timer_counter[0];
 80005ac:	4b7e      	ldr	r3, [pc, #504]	@ (80007a8 <FsmForTrafficLight+0x278>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a7e      	ldr	r2, [pc, #504]	@ (80007ac <FsmForTrafficLight+0x27c>)
 80005b2:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0] + timeForYellow/10;
 80005b4:	4b7c      	ldr	r3, [pc, #496]	@ (80007a8 <FsmForTrafficLight+0x278>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b7d      	ldr	r3, [pc, #500]	@ (80007b0 <FsmForTrafficLight+0x280>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	497d      	ldr	r1, [pc, #500]	@ (80007b4 <FsmForTrafficLight+0x284>)
 80005be:	fb81 0103 	smull	r0, r1, r1, r3
 80005c2:	1089      	asrs	r1, r1, #2
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1acb      	subs	r3, r1, r3
 80005c8:	4413      	add	r3, r2
 80005ca:	4a7b      	ldr	r2, [pc, #492]	@ (80007b8 <FsmForTrafficLight+0x288>)
 80005cc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	2110      	movs	r1, #16
 80005d2:	487a      	ldr	r0, [pc, #488]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80005d4:	f001 f837 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	4877      	ldr	r0, [pc, #476]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80005de:	f001 f832 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2140      	movs	r1, #64	@ 0x40
 80005e6:	4875      	ldr	r0, [pc, #468]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80005e8:	f001 f82d 	bl	8001646 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	4872      	ldr	r0, [pc, #456]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80005f2:	f001 f828 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fc:	486f      	ldr	r0, [pc, #444]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80005fe:	f001 f822 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000608:	486c      	ldr	r0, [pc, #432]	@ (80007bc <FsmForTrafficLight+0x28c>)
 800060a:	f001 f81c 	bl	8001646 <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 800060e:	4b6c      	ldr	r3, [pc, #432]	@ (80007c0 <FsmForTrafficLight+0x290>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d108      	bne.n	8000628 <FsmForTrafficLight+0xf8>
			status = RED1_YELLOW2;
 8000616:	4b62      	ldr	r3, [pc, #392]	@ (80007a0 <FsmForTrafficLight+0x270>)
 8000618:	2203      	movs	r2, #3
 800061a:	601a      	str	r2, [r3, #0]
			setTimer(timeForYellow, 0);
 800061c:	4b64      	ldr	r3, [pc, #400]	@ (80007b0 <FsmForTrafficLight+0x280>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fc06 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff fd9f 	bl	800016c <isButtonPressed>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	f000 8241 	beq.w	8000ab8 <FsmForTrafficLight+0x588>
			status = RED_LIGHT_CONFIG;
 8000636:	4b5a      	ldr	r3, [pc, #360]	@ (80007a0 <FsmForTrafficLight+0x270>)
 8000638:	220a      	movs	r2, #10
 800063a:	601a      	str	r2, [r3, #0]
			clearAllLight();
 800063c:	f7ff ff2c 	bl	8000498 <clearAllLight>
			value1 = 0;
 8000640:	4b5d      	ldr	r3, [pc, #372]	@ (80007b8 <FsmForTrafficLight+0x288>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
			value2 = 0;
 8000646:	4b59      	ldr	r3, [pc, #356]	@ (80007ac <FsmForTrafficLight+0x27c>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 800064c:	2100      	movs	r1, #0
 800064e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000652:	f000 fbef 	bl	8000e34 <setTimer>
		}
		break;
 8000656:	e22f      	b.n	8000ab8 <FsmForTrafficLight+0x588>
	case RED1_YELLOW2:
		value2 = timer_counter[0];
 8000658:	4b53      	ldr	r3, [pc, #332]	@ (80007a8 <FsmForTrafficLight+0x278>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a53      	ldr	r2, [pc, #332]	@ (80007ac <FsmForTrafficLight+0x27c>)
 800065e:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 8000660:	4b51      	ldr	r3, [pc, #324]	@ (80007a8 <FsmForTrafficLight+0x278>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a54      	ldr	r2, [pc, #336]	@ (80007b8 <FsmForTrafficLight+0x288>)
 8000666:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4853      	ldr	r0, [pc, #332]	@ (80007bc <FsmForTrafficLight+0x28c>)
 800066e:	f000 ffea 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2120      	movs	r1, #32
 8000676:	4851      	ldr	r0, [pc, #324]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000678:	f000 ffe5 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2140      	movs	r1, #64	@ 0x40
 8000680:	484e      	ldr	r0, [pc, #312]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000682:	f000 ffe0 	bl	8001646 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2180      	movs	r1, #128	@ 0x80
 800068a:	484c      	ldr	r0, [pc, #304]	@ (80007bc <FsmForTrafficLight+0x28c>)
 800068c:	f000 ffdb 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000696:	4849      	ldr	r0, [pc, #292]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000698:	f000 ffd5 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006a2:	4846      	ldr	r0, [pc, #280]	@ (80007bc <FsmForTrafficLight+0x28c>)
 80006a4:	f000 ffcf 	bl	8001646 <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 80006a8:	4b45      	ldr	r3, [pc, #276]	@ (80007c0 <FsmForTrafficLight+0x290>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d108      	bne.n	80006c2 <FsmForTrafficLight+0x192>
			status = GREEN1_RED2;
 80006b0:	4b3b      	ldr	r3, [pc, #236]	@ (80007a0 <FsmForTrafficLight+0x270>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	601a      	str	r2, [r3, #0]
			setTimer(timeForGreen, 0);
 80006b6:	4b3b      	ldr	r3, [pc, #236]	@ (80007a4 <FsmForTrafficLight+0x274>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fbb9 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff fd52 	bl	800016c <isButtonPressed>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 81f6 	beq.w	8000abc <FsmForTrafficLight+0x58c>
			status = RED_LIGHT_CONFIG;
 80006d0:	4b33      	ldr	r3, [pc, #204]	@ (80007a0 <FsmForTrafficLight+0x270>)
 80006d2:	220a      	movs	r2, #10
 80006d4:	601a      	str	r2, [r3, #0]
			clearAllLight();
 80006d6:	f7ff fedf 	bl	8000498 <clearAllLight>
			value1 = 0;
 80006da:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <FsmForTrafficLight+0x288>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			value2 = 0;
 80006e0:	4b32      	ldr	r3, [pc, #200]	@ (80007ac <FsmForTrafficLight+0x27c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ec:	f000 fba2 	bl	8000e34 <setTimer>
		}
		break;
 80006f0:	e1e4      	b.n	8000abc <FsmForTrafficLight+0x58c>
	case GREEN1_RED2:
		value2 = timer_counter[0] + timeForYellow/10;
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <FsmForTrafficLight+0x278>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <FsmForTrafficLight+0x280>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	492e      	ldr	r1, [pc, #184]	@ (80007b4 <FsmForTrafficLight+0x284>)
 80006fc:	fb81 0103 	smull	r0, r1, r1, r3
 8000700:	1089      	asrs	r1, r1, #2
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1acb      	subs	r3, r1, r3
 8000706:	4413      	add	r3, r2
 8000708:	4a28      	ldr	r2, [pc, #160]	@ (80007ac <FsmForTrafficLight+0x27c>)
 800070a:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 800070c:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <FsmForTrafficLight+0x278>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a29      	ldr	r2, [pc, #164]	@ (80007b8 <FsmForTrafficLight+0x288>)
 8000712:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	4828      	ldr	r0, [pc, #160]	@ (80007bc <FsmForTrafficLight+0x28c>)
 800071a:	f000 ff94 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	4826      	ldr	r0, [pc, #152]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000724:	f000 ff8f 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	@ 0x40
 800072c:	4823      	ldr	r0, [pc, #140]	@ (80007bc <FsmForTrafficLight+0x28c>)
 800072e:	f000 ff8a 	bl	8001646 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 8000732:	2201      	movs	r2, #1
 8000734:	2180      	movs	r1, #128	@ 0x80
 8000736:	4821      	ldr	r0, [pc, #132]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000738:	f000 ff85 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000742:	481e      	ldr	r0, [pc, #120]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000744:	f000 ff7f 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800074e:	481b      	ldr	r0, [pc, #108]	@ (80007bc <FsmForTrafficLight+0x28c>)
 8000750:	f000 ff79 	bl	8001646 <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <FsmForTrafficLight+0x290>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d108      	bne.n	800076e <FsmForTrafficLight+0x23e>
			status = YELLOW1_RED2;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <FsmForTrafficLight+0x270>)
 800075e:	2205      	movs	r2, #5
 8000760:	601a      	str	r2, [r3, #0]
			setTimer(timeForYellow, 0);
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <FsmForTrafficLight+0x280>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb63 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff fcfc 	bl	800016c <isButtonPressed>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 81a2 	beq.w	8000ac0 <FsmForTrafficLight+0x590>
			status = RED_LIGHT_CONFIG;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <FsmForTrafficLight+0x270>)
 800077e:	220a      	movs	r2, #10
 8000780:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000782:	f7ff fe89 	bl	8000498 <clearAllLight>
			value1 = 0;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <FsmForTrafficLight+0x288>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
			value2 = 0;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <FsmForTrafficLight+0x27c>)
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000792:	2100      	movs	r1, #0
 8000794:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000798:	f000 fb4c 	bl	8000e34 <setTimer>
		}
		break;
 800079c:	e190      	b.n	8000ac0 <FsmForTrafficLight+0x590>
 800079e:	bf00      	nop
 80007a0:	200000a0 	.word	0x200000a0
 80007a4:	20000058 	.word	0x20000058
 80007a8:	2000011c 	.word	0x2000011c
 80007ac:	20000044 	.word	0x20000044
 80007b0:	2000005c 	.word	0x2000005c
 80007b4:	66666667 	.word	0x66666667
 80007b8:	20000040 	.word	0x20000040
 80007bc:	40010800 	.word	0x40010800
 80007c0:	20000110 	.word	0x20000110
	case YELLOW1_RED2:
		value2 = timer_counter[0];
 80007c4:	4ba6      	ldr	r3, [pc, #664]	@ (8000a60 <FsmForTrafficLight+0x530>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4aa6      	ldr	r2, [pc, #664]	@ (8000a64 <FsmForTrafficLight+0x534>)
 80007ca:	6013      	str	r3, [r2, #0]
		value1 = timer_counter[0];
 80007cc:	4ba4      	ldr	r3, [pc, #656]	@ (8000a60 <FsmForTrafficLight+0x530>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4aa5      	ldr	r2, [pc, #660]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80007d2:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2110      	movs	r1, #16
 80007d8:	48a4      	ldr	r0, [pc, #656]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80007da:	f000 ff34 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin, SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2120      	movs	r1, #32
 80007e2:	48a2      	ldr	r0, [pc, #648]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80007e4:	f000 ff2f 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2140      	movs	r1, #64	@ 0x40
 80007ec:	489f      	ldr	r0, [pc, #636]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80007ee:	f000 ff2a 	bl	8001646 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin, SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2180      	movs	r1, #128	@ 0x80
 80007f6:	489d      	ldr	r0, [pc, #628]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80007f8:	f000 ff25 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	489a      	ldr	r0, [pc, #616]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 8000804:	f000 ff1f 	bl	8001646 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800080e:	4897      	ldr	r0, [pc, #604]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 8000810:	f000 ff19 	bl	8001646 <HAL_GPIO_WritePin>
		if(timer_flag[0] == 1){
 8000814:	4b96      	ldr	r3, [pc, #600]	@ (8000a70 <FsmForTrafficLight+0x540>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d108      	bne.n	800082e <FsmForTrafficLight+0x2fe>
			status = RED1_GREEN2;
 800081c:	4b95      	ldr	r3, [pc, #596]	@ (8000a74 <FsmForTrafficLight+0x544>)
 800081e:	2202      	movs	r2, #2
 8000820:	601a      	str	r2, [r3, #0]
			setTimer(timeForGreen, 0);
 8000822:	4b95      	ldr	r3, [pc, #596]	@ (8000a78 <FsmForTrafficLight+0x548>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fb03 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fc9c 	bl	800016c <isButtonPressed>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	f000 8144 	beq.w	8000ac4 <FsmForTrafficLight+0x594>
			status = RED_LIGHT_CONFIG;
 800083c:	4b8d      	ldr	r3, [pc, #564]	@ (8000a74 <FsmForTrafficLight+0x544>)
 800083e:	220a      	movs	r2, #10
 8000840:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000842:	f7ff fe29 	bl	8000498 <clearAllLight>
			value1 = 0;
 8000846:	4b88      	ldr	r3, [pc, #544]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
			value2 = 0;
 800084c:	4b85      	ldr	r3, [pc, #532]	@ (8000a64 <FsmForTrafficLight+0x534>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000852:	2100      	movs	r1, #0
 8000854:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000858:	f000 faec 	bl	8000e34 <setTimer>
		}
		break;
 800085c:	e132      	b.n	8000ac4 <FsmForTrafficLight+0x594>
	case RED_LIGHT_CONFIG:
		if(isButtonPressed(1)){
 800085e:	2001      	movs	r0, #1
 8000860:	f7ff fc84 	bl	800016c <isButtonPressed>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d00e      	beq.n	8000888 <FsmForTrafficLight+0x358>
			if(value1 > 9900){
 800086a:	4b7f      	ldr	r3, [pc, #508]	@ (8000a68 <FsmForTrafficLight+0x538>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f242 62ac 	movw	r2, #9900	@ 0x26ac
 8000872:	4293      	cmp	r3, r2
 8000874:	dd03      	ble.n	800087e <FsmForTrafficLight+0x34e>
				value1 = 0;
 8000876:	4b7c      	ldr	r3, [pc, #496]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e004      	b.n	8000888 <FsmForTrafficLight+0x358>
			}else{
				value1 += 100;
 800087e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3364      	adds	r3, #100	@ 0x64
 8000884:	4a78      	ldr	r2, [pc, #480]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000886:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 8000888:	2002      	movs	r0, #2
 800088a:	f7ff fc6f 	bl	800016c <isButtonPressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d008      	beq.n	80008a6 <FsmForTrafficLight+0x376>
			timeForRed_tmp = value1*10;
 8000894:	4b74      	ldr	r3, [pc, #464]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b76      	ldr	r3, [pc, #472]	@ (8000a7c <FsmForTrafficLight+0x54c>)
 80008a4:	601a      	str	r2, [r3, #0]
		}

		if(timer_flag[0] == 1){
 80008a6:	4b72      	ldr	r3, [pc, #456]	@ (8000a70 <FsmForTrafficLight+0x540>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d10c      	bne.n	80008c8 <FsmForTrafficLight+0x398>
			HAL_GPIO_TogglePin(RED_LIGHT_1_GPIO_Port, RED_LIGHT_1_Pin);
 80008ae:	2110      	movs	r1, #16
 80008b0:	486e      	ldr	r0, [pc, #440]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80008b2:	f000 fee0 	bl	8001676 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_LIGHT_2_GPIO_Port, RED_LIGHT_2_Pin);
 80008b6:	2180      	movs	r1, #128	@ 0x80
 80008b8:	486c      	ldr	r0, [pc, #432]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 80008ba:	f000 fedc 	bl	8001676 <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 80008be:	2100      	movs	r1, #0
 80008c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008c4:	f000 fab6 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff fc4f 	bl	800016c <isButtonPressed>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 80f9 	beq.w	8000ac8 <FsmForTrafficLight+0x598>
			status = YELLOW_LIGHT_CONFIG;
 80008d6:	4b67      	ldr	r3, [pc, #412]	@ (8000a74 <FsmForTrafficLight+0x544>)
 80008d8:	220b      	movs	r2, #11
 80008da:	601a      	str	r2, [r3, #0]
			clearAllLight();
 80008dc:	f7ff fddc 	bl	8000498 <clearAllLight>
			value1 = 0;
 80008e0:	4b61      	ldr	r3, [pc, #388]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
			value2 = 0;
 80008e6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a64 <FsmForTrafficLight+0x534>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 80008ec:	2100      	movs	r1, #0
 80008ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008f2:	f000 fa9f 	bl	8000e34 <setTimer>
		}
		break;
 80008f6:	e0e7      	b.n	8000ac8 <FsmForTrafficLight+0x598>
	case YELLOW_LIGHT_CONFIG:
		if(isButtonPressed(1)){
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fc37 	bl	800016c <isButtonPressed>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00e      	beq.n	8000922 <FsmForTrafficLight+0x3f2>
			if(value1 > 9900){
 8000904:	4b58      	ldr	r3, [pc, #352]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f242 62ac 	movw	r2, #9900	@ 0x26ac
 800090c:	4293      	cmp	r3, r2
 800090e:	dd03      	ble.n	8000918 <FsmForTrafficLight+0x3e8>
				value1 = 0;
 8000910:	4b55      	ldr	r3, [pc, #340]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e004      	b.n	8000922 <FsmForTrafficLight+0x3f2>
			}else{
				value1 += 100;
 8000918:	4b53      	ldr	r3, [pc, #332]	@ (8000a68 <FsmForTrafficLight+0x538>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	3364      	adds	r3, #100	@ 0x64
 800091e:	4a52      	ldr	r2, [pc, #328]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000920:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fc22 	bl	800016c <isButtonPressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d008      	beq.n	8000940 <FsmForTrafficLight+0x410>
			timeForYellow_tmp = value1*10;
 800092e:	4b4e      	ldr	r3, [pc, #312]	@ (8000a68 <FsmForTrafficLight+0x538>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	461a      	mov	r2, r3
 800093c:	4b50      	ldr	r3, [pc, #320]	@ (8000a80 <FsmForTrafficLight+0x550>)
 800093e:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[0] == 1){
 8000940:	4b4b      	ldr	r3, [pc, #300]	@ (8000a70 <FsmForTrafficLight+0x540>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d10d      	bne.n	8000964 <FsmForTrafficLight+0x434>
			HAL_GPIO_TogglePin(YELLOW_LIGHT_1_GPIO_Port, YELLOW_LIGHT_1_Pin);
 8000948:	2120      	movs	r1, #32
 800094a:	4848      	ldr	r0, [pc, #288]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 800094c:	f000 fe93 	bl	8001676 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_LIGHT_2_GPIO_Port, YELLOW_LIGHT_2_Pin);
 8000950:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000954:	4845      	ldr	r0, [pc, #276]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 8000956:	f000 fe8e 	bl	8001676 <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000960:	f000 fa68 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff fc01 	bl	800016c <isButtonPressed>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 80ad 	beq.w	8000acc <FsmForTrafficLight+0x59c>
			status = GREEN_LIGHT_CONFIG;
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <FsmForTrafficLight+0x544>)
 8000974:	220c      	movs	r2, #12
 8000976:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000978:	f7ff fd8e 	bl	8000498 <clearAllLight>
			value1 = 0;
 800097c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a68 <FsmForTrafficLight+0x538>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
			value2 = 0;
 8000982:	4b38      	ldr	r3, [pc, #224]	@ (8000a64 <FsmForTrafficLight+0x534>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
			setTimer(500, 0);
 8000988:	2100      	movs	r1, #0
 800098a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800098e:	f000 fa51 	bl	8000e34 <setTimer>
		}
		break;
 8000992:	e09b      	b.n	8000acc <FsmForTrafficLight+0x59c>
	case GREEN_LIGHT_CONFIG:

		if(isButtonPressed(1)){
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fbe9 	bl	800016c <isButtonPressed>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d00e      	beq.n	80009be <FsmForTrafficLight+0x48e>
			if(value1 > 9900){
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f242 62ac 	movw	r2, #9900	@ 0x26ac
 80009a8:	4293      	cmp	r3, r2
 80009aa:	dd03      	ble.n	80009b4 <FsmForTrafficLight+0x484>
				value1 = 0;
 80009ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	e004      	b.n	80009be <FsmForTrafficLight+0x48e>
			}else{
				value1 += 100;
 80009b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3364      	adds	r3, #100	@ 0x64
 80009ba:	4a2b      	ldr	r2, [pc, #172]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80009bc:	6013      	str	r3, [r2, #0]
			}
		}
		if(isButtonPressed(2)){
 80009be:	2002      	movs	r0, #2
 80009c0:	f7ff fbd4 	bl	800016c <isButtonPressed>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d026      	beq.n	8000a18 <FsmForTrafficLight+0x4e8>
			timeForGreen_tmp = value1*10;
 80009ca:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <FsmForTrafficLight+0x538>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4613      	mov	r3, r2
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a84 <FsmForTrafficLight+0x554>)
 80009da:	601a      	str	r2, [r3, #0]
			if (timeForGreen_tmp + timeForYellow_tmp != timeForRed_tmp){
 80009dc:	4b29      	ldr	r3, [pc, #164]	@ (8000a84 <FsmForTrafficLight+0x554>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <FsmForTrafficLight+0x550>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	441a      	add	r2, r3
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <FsmForTrafficLight+0x54c>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d008      	beq.n	8000a00 <FsmForTrafficLight+0x4d0>
				status = ERROR_STATE;
 80009ee:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <FsmForTrafficLight+0x544>)
 80009f0:	2214      	movs	r2, #20
 80009f2:	601a      	str	r2, [r3, #0]
				setTimer(2000, 0);
 80009f4:	2100      	movs	r1, #0
 80009f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009fa:	f000 fa1b 	bl	8000e34 <setTimer>
 80009fe:	e00b      	b.n	8000a18 <FsmForTrafficLight+0x4e8>
			}else{
				timeForGreen = timeForGreen_tmp;
 8000a00:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <FsmForTrafficLight+0x554>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1c      	ldr	r2, [pc, #112]	@ (8000a78 <FsmForTrafficLight+0x548>)
 8000a06:	6013      	str	r3, [r2, #0]
				timeForRed = timeForRed_tmp;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <FsmForTrafficLight+0x54c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a88 <FsmForTrafficLight+0x558>)
 8000a0e:	6013      	str	r3, [r2, #0]
				timeForYellow = timeForYellow_tmp;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <FsmForTrafficLight+0x550>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	@ (8000a8c <FsmForTrafficLight+0x55c>)
 8000a16:	6013      	str	r3, [r2, #0]
			}
		}
		if(timer_flag[0] == 1){
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <FsmForTrafficLight+0x540>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10d      	bne.n	8000a3c <FsmForTrafficLight+0x50c>
			HAL_GPIO_TogglePin(GREEN_LIGHT_1_GPIO_Port, GREEN_LIGHT_1_Pin);
 8000a20:	2140      	movs	r1, #64	@ 0x40
 8000a22:	4812      	ldr	r0, [pc, #72]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 8000a24:	f000 fe27 	bl	8001676 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LIGHT_2_GPIO_Port, GREEN_LIGHT_2_Pin);
 8000a28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <FsmForTrafficLight+0x53c>)
 8000a2e:	f000 fe22 	bl	8001676 <HAL_GPIO_TogglePin>
			setTimer(500, 0);
 8000a32:	2100      	movs	r1, #0
 8000a34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a38:	f000 f9fc 	bl	8000e34 <setTimer>
		}
		if (isButtonPressed(0)){
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff fb95 	bl	800016c <isButtonPressed>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d043      	beq.n	8000ad0 <FsmForTrafficLight+0x5a0>
			status = RED1_GREEN2;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <FsmForTrafficLight+0x544>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000a4e:	f7ff fd23 	bl	8000498 <clearAllLight>
			setTimer(timeForGreen, 0);
 8000a52:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <FsmForTrafficLight+0x548>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f9eb 	bl	8000e34 <setTimer>
		}
		break;
 8000a5e:	e037      	b.n	8000ad0 <FsmForTrafficLight+0x5a0>
 8000a60:	2000011c 	.word	0x2000011c
 8000a64:	20000044 	.word	0x20000044
 8000a68:	20000040 	.word	0x20000040
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	20000110 	.word	0x20000110
 8000a74:	200000a0 	.word	0x200000a0
 8000a78:	20000058 	.word	0x20000058
 8000a7c:	200000ac 	.word	0x200000ac
 8000a80:	200000a8 	.word	0x200000a8
 8000a84:	200000a4 	.word	0x200000a4
 8000a88:	20000060 	.word	0x20000060
 8000a8c:	2000005c 	.word	0x2000005c
	case ERROR_STATE:
		turnOnAllLight();
 8000a90:	f7ff fd28 	bl	80004e4 <turnOnAllLight>
		if(timer_flag[0]){
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <FsmForTrafficLight+0x5ac>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01b      	beq.n	8000ad4 <FsmForTrafficLight+0x5a4>
			status = RED1_GREEN2;
 8000a9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <FsmForTrafficLight+0x5b0>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	601a      	str	r2, [r3, #0]
			clearAllLight();
 8000aa2:	f7ff fcf9 	bl	8000498 <clearAllLight>
			setTimer(timeForGreen, 0);
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <FsmForTrafficLight+0x5b4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f9c1 	bl	8000e34 <setTimer>
		}
		break;
 8000ab2:	e00f      	b.n	8000ad4 <FsmForTrafficLight+0x5a4>
	default:
		break;
 8000ab4:	bf00      	nop
 8000ab6:	e00e      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ab8:	bf00      	nop
 8000aba:	e00c      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000abc:	bf00      	nop
 8000abe:	e00a      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ac0:	bf00      	nop
 8000ac2:	e008      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ac4:	bf00      	nop
 8000ac6:	e006      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ac8:	bf00      	nop
 8000aca:	e004      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000acc:	bf00      	nop
 8000ace:	e002      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ad0:	bf00      	nop
 8000ad2:	e000      	b.n	8000ad6 <FsmForTrafficLight+0x5a6>
		break;
 8000ad4:	bf00      	nop
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000110 	.word	0x20000110
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	20000058 	.word	0x20000058

08000ae8 <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS];
void button_reading(void){
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < N0_OF_BUTTONS; i ++){
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e046      	b.n	8000b82 <button_reading+0x9a>
		debounceButtonBuffer2[i] =debounceButtonBuffer1[i];
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4926      	ldr	r1, [pc, #152]	@ (8000b94 <button_reading+0xac>)
 8000afa:	5c89      	ldrb	r1, [r1, r2]
 8000afc:	4a26      	ldr	r2, [pc, #152]	@ (8000b98 <button_reading+0xb0>)
 8000afe:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, i + 1);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	79fc      	ldrb	r4, [r7, #7]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4823      	ldr	r0, [pc, #140]	@ (8000b9c <button_reading+0xb4>)
 8000b0e:	f000 fd83 	bl	8001618 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <button_reading+0xac>)
 8000b18:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b94 <button_reading+0xac>)
 8000b1e:	5cd2      	ldrb	r2, [r2, r3]
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	491d      	ldr	r1, [pc, #116]	@ (8000b98 <button_reading+0xb0>)
 8000b24:	5ccb      	ldrb	r3, [r1, r3]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d128      	bne.n	8000b7c <button_reading+0x94>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4919      	ldr	r1, [pc, #100]	@ (8000b94 <button_reading+0xac>)
 8000b30:	5c89      	ldrb	r1, [r1, r2]
 8000b32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba0 <button_reading+0xb8>)
 8000b34:	54d1      	strb	r1, [r2, r3]
			if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <button_reading+0xb8>)
 8000b3a:	5cd3      	ldrb	r3, [r2, r3]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d114      	bne.n	8000b6a <button_reading+0x82>
			//if a button is pressed, we start counting
				if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING){
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <button_reading+0xbc>)
 8000b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b48:	2b63      	cmp	r3, #99	@ 0x63
 8000b4a:	d809      	bhi.n	8000b60 <button_reading+0x78>
					counterForButtonPress1s[i]++;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a15      	ldr	r2, [pc, #84]	@ (8000ba4 <button_reading+0xbc>)
 8000b50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b54:	3201      	adds	r2, #1
 8000b56:	b291      	uxth	r1, r2
 8000b58:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <button_reading+0xbc>)
 8000b5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b5e:	e00d      	b.n	8000b7c <button_reading+0x94>
				} else {
				//the flag is turned on when 1 second has passed
				//since the button is pressed.
					flagForButtonPress1s[i] = 1;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a11      	ldr	r2, [pc, #68]	@ (8000ba8 <button_reading+0xc0>)
 8000b64:	2101      	movs	r1, #1
 8000b66:	54d1      	strb	r1, [r2, r3]
 8000b68:	e008      	b.n	8000b7c <button_reading+0x94>
					//todo
 				}
			} else {
				counterForButtonPress1s[i] = 0;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <button_reading+0xbc>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				flagForButtonPress1s[i] = 0;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ba8 <button_reading+0xc0>)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < N0_OF_BUTTONS; i ++){
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d9b5      	bls.n	8000af4 <button_reading+0xc>
			}
		}

	}
}
 8000b88:	bf00      	nop
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000b4 	.word	0x200000b4
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	200000b0 	.word	0x200000b0
 8000ba4:	200000c0 	.word	0x200000c0
 8000ba8:	200000bc 	.word	0x200000bc

08000bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fa46 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f83c 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f8c2 	bl	8000d40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bbc:	f000 f874 	bl	8000ca8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000bc0:	4815      	ldr	r0, [pc, #84]	@ (8000c18 <main+0x6c>)
 8000bc2:	f001 f99f 	bl	8001f04 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer (50, 1);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2032      	movs	r0, #50	@ 0x32
 8000bca:	f000 f933 	bl	8000e34 <setTimer>
    value1 = 200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <main+0x70>)
 8000bd0:	22c8      	movs	r2, #200	@ 0xc8
 8000bd2:	601a      	str	r2, [r3, #0]
    value2 = 200;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <main+0x74>)
 8000bd6:	22c8      	movs	r2, #200	@ 0xc8
 8000bd8:	601a      	str	r2, [r3, #0]
    status = INIT;
 8000bda:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <main+0x78>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  update7SegBuffer();
 8000be0:	f7ff fc0c 	bl	80003fc <update7SegBuffer>
	  	  FsmForTrafficLight();
 8000be4:	f7ff fca4 	bl	8000530 <FsmForTrafficLight>
	  	  if(timer_flag[1] == 1){
 8000be8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c28 <main+0x7c>)
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d1f7      	bne.n	8000be0 <main+0x34>
	  		  if (index_led > 3){
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <main+0x80>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	dd02      	ble.n	8000bfe <main+0x52>
	  			index_led = 0;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <main+0x80>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
	  		  }update7SEG(index_led++);
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <main+0x80>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	4909      	ldr	r1, [pc, #36]	@ (8000c2c <main+0x80>)
 8000c06:	600a      	str	r2, [r1, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb61 	bl	80002d0 <update7SEG>
	  		  setTimer(50, 1);
 8000c0e:	2101      	movs	r1, #1
 8000c10:	2032      	movs	r0, #50	@ 0x32
 8000c12:	f000 f90f 	bl	8000e34 <setTimer>
	  update7SegBuffer();
 8000c16:	e7e3      	b.n	8000be0 <main+0x34>
 8000c18:	200000c8 	.word	0x200000c8
 8000c1c:	20000040 	.word	0x20000040
 8000c20:	20000044 	.word	0x20000044
 8000c24:	200000a0 	.word	0x200000a0
 8000c28:	20000110 	.word	0x20000110
 8000c2c:	2000009c 	.word	0x2000009c

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b090      	sub	sp, #64	@ 0x40
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0318 	add.w	r3, r7, #24
 8000c3a:	2228      	movs	r2, #40	@ 0x28
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fcec 	bl	800261c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c52:	2302      	movs	r3, #2
 8000c54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0318 	add.w	r3, r7, #24
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fd1e 	bl	80016a8 <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c72:	f000 f8d8 	bl	8000e26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ff8c 	bl	8001bac <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c9a:	f000 f8c4 	bl	8000e26 <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3740      	adds	r7, #64	@ 0x40
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000cce:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000cd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cda:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000cdc:	2209      	movs	r2, #9
 8000cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000cee:	f001 f8b9 	bl	8001e64 <HAL_TIM_Base_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cf8:	f000 f895 	bl	8000e26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	4619      	mov	r1, r3
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000d0a:	f001 fa37 	bl	800217c <HAL_TIM_ConfigClockSource>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 f887 	bl	8000e26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_TIM2_Init+0x94>)
 8000d26:	f001 fc0f 	bl	8002548 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 f879 	bl	8000e26 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200000c8 	.word	0x200000c8

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4a26      	ldr	r2, [pc, #152]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6193      	str	r3, [r2, #24]
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a20      	ldr	r2, [pc, #128]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <MX_GPIO_Init+0xb4>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	f643 71f0 	movw	r1, #16368	@ 0x3ff0
 8000d8a:	481b      	ldr	r0, [pc, #108]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000d8c:	f000 fc5b 	bl	8001646 <HAL_GPIO_WritePin>
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000d90:	2200      	movs	r2, #0
 8000d92:	217f      	movs	r1, #127	@ 0x7f
 8000d94:	4819      	ldr	r0, [pc, #100]	@ (8000dfc <MX_GPIO_Init+0xbc>)
 8000d96:	f000 fc56 	bl	8001646 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d9a:	230e      	movs	r3, #14
 8000d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000dae:	f000 fab7 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LIGHT_1_Pin YELLOW_LIGHT_1_Pin GREEN_LIGHT_1_Pin RED_LIGHT_2_Pin
                           YELLOW_LIGHT_2_Pin GREEN_LIGHT_2_Pin EN_0_Pin EN_1_Pin
                           EN_2_Pin EN_3_Pin */
  GPIO_InitStruct.Pin = RED_LIGHT_1_Pin|YELLOW_LIGHT_1_Pin|GREEN_LIGHT_1_Pin|RED_LIGHT_2_Pin
 8000db2:	f643 73f0 	movw	r3, #16368	@ 0x3ff0
 8000db6:	60bb      	str	r3, [r7, #8]
                          |YELLOW_LIGHT_2_Pin|GREEN_LIGHT_2_Pin|EN_0_Pin|EN_1_Pin
                          |EN_2_Pin|EN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <MX_GPIO_Init+0xb8>)
 8000dcc:	f000 faa8 	bl	8001320 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000dd0:	237f      	movs	r3, #127	@ 0x7f
 8000dd2:	60bb      	str	r3, [r7, #8]
                          |SEG_4_Pin|SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_GPIO_Init+0xbc>)
 8000de8:	f000 fa9a 	bl	8001320 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3718      	adds	r7, #24
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40010800 	.word	0x40010800
 8000dfc:	40010c00 	.word	0x40010c00

08000e00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e10:	d105      	bne.n	8000e1e <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000e12:	f7ff fe69 	bl	8000ae8 <button_reading>
		timer_run();
 8000e16:	f000 f82b 	bl	8000e70 <timer_run>
		getKeyInput();
 8000e1a:	f7ff f9c1 	bl	80001a0 <getKeyInput>
	}
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2a:	b672      	cpsid	i
}
 8000e2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2e:	bf00      	nop
 8000e30:	e7fd      	b.n	8000e2e <Error_Handler+0x8>
	...

08000e34 <setTimer>:
#include "software_timer.h"
#include "all.h"
int TIMER_CYCLE = 10;
int timer_flag[No_timers] = {};
int timer_counter[No_timers] ={};
void setTimer (int duration, int index){
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIMER_CYCLE;
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <setTimer+0x30>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <setTimer+0x34>)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000e50:	4a06      	ldr	r2, [pc, #24]	@ (8000e6c <setTimer+0x38>)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2100      	movs	r1, #0
 8000e56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	20000064 	.word	0x20000064
 8000e68:	2000011c 	.word	0x2000011c
 8000e6c:	20000110 	.word	0x20000110

08000e70 <timer_run>:
void timer_run (){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
	for(int i = 0;i < No_timers; i++){
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	e01c      	b.n	8000eb6 <timer_run+0x46>
		if( timer_counter[i] > 0){
 8000e7c:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <timer_run+0x58>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dd13      	ble.n	8000eb0 <timer_run+0x40>
			timer_counter[i] --;
 8000e88:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec8 <timer_run+0x58>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e90:	1e5a      	subs	r2, r3, #1
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <timer_run+0x58>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if( timer_counter[i] == 0) timer_flag[i] = 1;
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <timer_run+0x58>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <timer_run+0x40>
 8000ea6:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <timer_run+0x5c>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2101      	movs	r1, #1
 8000eac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0;i < No_timers; i++){
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	dddf      	ble.n	8000e7c <timer_run+0xc>
		}
	}

}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	2000011c 	.word	0x2000011c
 8000ecc:	20000110 	.word	0x20000110

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6193      	str	r3, [r2, #24]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ef8:	61d3      	str	r3, [r2, #28]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_MspInit+0x5c>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_MspInit+0x60>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_MspInit+0x60>)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010000 	.word	0x40010000

08000f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f44:	d113      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f46:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_TIM_Base_MspInit+0x44>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 f9a5 	bl	80012b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f68:	201c      	movs	r0, #28
 8000f6a:	f000 f9be 	bl	80012ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <NMI_Handler+0x4>

08000f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <MemManage_Handler+0x4>

08000f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr

08000fbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr

08000fc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fcc:	f000 f87e 	bl	80010cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f000 ffdf 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000c8 	.word	0x200000c8

08000fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff4:	f7ff fff8 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff8:	480b      	ldr	r0, [pc, #44]	@ (8001028 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ffa:	490c      	ldr	r1, [pc, #48]	@ (800102c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8001030 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001000:	e002      	b.n	8001008 <LoopCopyDataInit>

08001002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001006:	3304      	adds	r3, #4

08001008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800100c:	d3f9      	bcc.n	8001002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001010:	4c09      	ldr	r4, [pc, #36]	@ (8001038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001014:	e001      	b.n	800101a <LoopFillZerobss>

08001016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001018:	3204      	adds	r2, #4

0800101a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800101c:	d3fb      	bcc.n	8001016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101e:	f001 fb05 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001022:	f7ff fdc3 	bl	8000bac <main>
  bx lr
 8001026:	4770      	bx	lr
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001030:	080026b8 	.word	0x080026b8
  ldr r2, =_sbss
 8001034:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001038:	2000012c 	.word	0x2000012c

0800103c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC1_2_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <HAL_Init+0x28>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	@ (8001068 <HAL_Init+0x28>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f923 	bl	800129c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	200f      	movs	r0, #15
 8001058:	f000 f808 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff ff38 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40022000 	.word	0x40022000

0800106c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <HAL_InitTick+0x54>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x58>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	fbb3 f3f1 	udiv	r3, r3, r1
 8001086:	fbb2 f3f3 	udiv	r3, r2, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f93b 	bl	8001306 <HAL_SYSTICK_Config>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e00e      	b.n	80010b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d80a      	bhi.n	80010b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a0:	2200      	movs	r2, #0
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f000 f903 	bl	80012b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <HAL_InitTick+0x5c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e000      	b.n	80010b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000068 	.word	0x20000068
 80010c4:	20000070 	.word	0x20000070
 80010c8:	2000006c 	.word	0x2000006c

080010cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <HAL_IncTick+0x1c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_IncTick+0x20>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	4a03      	ldr	r2, [pc, #12]	@ (80010ec <HAL_IncTick+0x20>)
 80010de:	6013      	str	r3, [r2, #0]
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	20000070 	.word	0x20000070
 80010ec:	20000128 	.word	0x20000128

080010f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b02      	ldr	r3, [pc, #8]	@ (8001100 <HAL_GetTick+0x10>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000128 	.word	0x20000128

08001104 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001120:	4013      	ands	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800112c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001136:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <__NVIC_SetPriorityGrouping+0x44>)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	60d3      	str	r3, [r2, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <__NVIC_GetPriorityGrouping+0x18>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	0a1b      	lsrs	r3, r3, #8
 8001156:	f003 0307 	and.w	r3, r3, #7
}
 800115a:	4618      	mov	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	2b00      	cmp	r3, #0
 8001178:	db0b      	blt.n	8001192 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	f003 021f 	and.w	r2, r3, #31
 8001180:	4906      	ldr	r1, [pc, #24]	@ (800119c <__NVIC_EnableIRQ+0x34>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	2001      	movs	r0, #1
 800118a:	fa00 f202 	lsl.w	r2, r0, r2
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	@ (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	@ 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001268:	d301      	bcc.n	800126e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800126a:	2301      	movs	r3, #1
 800126c:	e00f      	b.n	800128e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <SysTick_Config+0x40>)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001276:	210f      	movs	r1, #15
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f7ff ff90 	bl	80011a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001280:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <SysTick_Config+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <SysTick_Config+0x40>)
 8001288:	2207      	movs	r2, #7
 800128a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	e000e010 	.word	0xe000e010

0800129c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff2d 	bl	8001104 <__NVIC_SetPriorityGrouping>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b086      	sub	sp, #24
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
 80012be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c4:	f7ff ff42 	bl	800114c <__NVIC_GetPriorityGrouping>
 80012c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f7ff ff90 	bl	80011f4 <NVIC_EncodePriority>
 80012d4:	4602      	mov	r2, r0
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5f 	bl	80011a0 <__NVIC_SetPriority>
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff35 	bl	8001168 <__NVIC_EnableIRQ>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ffa2 	bl	8001258 <SysTick_Config>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b08b      	sub	sp, #44	@ 0x2c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e161      	b.n	80015f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001334:	2201      	movs	r2, #1
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8150 	bne.w	80015f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a97      	ldr	r2, [pc, #604]	@ (80015b4 <HAL_GPIO_Init+0x294>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d05e      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800135c:	4a95      	ldr	r2, [pc, #596]	@ (80015b4 <HAL_GPIO_Init+0x294>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d875      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001362:	4a95      	ldr	r2, [pc, #596]	@ (80015b8 <HAL_GPIO_Init+0x298>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d058      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001368:	4a93      	ldr	r2, [pc, #588]	@ (80015b8 <HAL_GPIO_Init+0x298>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d86f      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800136e:	4a93      	ldr	r2, [pc, #588]	@ (80015bc <HAL_GPIO_Init+0x29c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d052      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001374:	4a91      	ldr	r2, [pc, #580]	@ (80015bc <HAL_GPIO_Init+0x29c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d869      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800137a:	4a91      	ldr	r2, [pc, #580]	@ (80015c0 <HAL_GPIO_Init+0x2a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d04c      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001380:	4a8f      	ldr	r2, [pc, #572]	@ (80015c0 <HAL_GPIO_Init+0x2a0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d863      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001386:	4a8f      	ldr	r2, [pc, #572]	@ (80015c4 <HAL_GPIO_Init+0x2a4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d046      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800138c:	4a8d      	ldr	r2, [pc, #564]	@ (80015c4 <HAL_GPIO_Init+0x2a4>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d85d      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d82a      	bhi.n	80013ec <HAL_GPIO_Init+0xcc>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d859      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800139a:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <HAL_GPIO_Init+0x80>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	0800141b 	.word	0x0800141b
 80013a4:	080013f5 	.word	0x080013f5
 80013a8:	08001407 	.word	0x08001407
 80013ac:	08001449 	.word	0x08001449
 80013b0:	0800144f 	.word	0x0800144f
 80013b4:	0800144f 	.word	0x0800144f
 80013b8:	0800144f 	.word	0x0800144f
 80013bc:	0800144f 	.word	0x0800144f
 80013c0:	0800144f 	.word	0x0800144f
 80013c4:	0800144f 	.word	0x0800144f
 80013c8:	0800144f 	.word	0x0800144f
 80013cc:	0800144f 	.word	0x0800144f
 80013d0:	0800144f 	.word	0x0800144f
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	0800144f 	.word	0x0800144f
 80013dc:	0800144f 	.word	0x0800144f
 80013e0:	0800144f 	.word	0x0800144f
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001411 	.word	0x08001411
 80013ec:	4a76      	ldr	r2, [pc, #472]	@ (80015c8 <HAL_GPIO_Init+0x2a8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f2:	e02c      	b.n	800144e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e029      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e024      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	3308      	adds	r3, #8
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e01f      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	330c      	adds	r3, #12
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e01a      	b.n	8001450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001422:	2304      	movs	r3, #4
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e013      	b.n	8001450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001430:	2308      	movs	r3, #8
 8001432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	611a      	str	r2, [r3, #16]
          break;
 800143a:	e009      	b.n	8001450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	615a      	str	r2, [r3, #20]
          break;
 8001446:	e003      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x130>
          break;
 800144e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	@ 0xff
 8001454:	d801      	bhi.n	800145a <HAL_GPIO_Init+0x13a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e001      	b.n	800145e <HAL_GPIO_Init+0x13e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	@ 0xff
 8001464:	d802      	bhi.n	800146c <HAL_GPIO_Init+0x14c>
 8001466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x152>
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	3b08      	subs	r3, #8
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	210f      	movs	r1, #15
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80a9 	beq.w	80015f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a0:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_GPIO_Init+0x2ac>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a49      	ldr	r2, [pc, #292]	@ (80015cc <HAL_GPIO_Init+0x2ac>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_GPIO_Init+0x2ac>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b8:	4a45      	ldr	r2, [pc, #276]	@ (80015d0 <HAL_GPIO_Init+0x2b0>)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a3d      	ldr	r2, [pc, #244]	@ (80015d4 <HAL_GPIO_Init+0x2b4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d00d      	beq.n	8001500 <HAL_GPIO_Init+0x1e0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3c      	ldr	r2, [pc, #240]	@ (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d007      	beq.n	80014fc <HAL_GPIO_Init+0x1dc>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3b      	ldr	r2, [pc, #236]	@ (80015dc <HAL_GPIO_Init+0x2bc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_GPIO_Init+0x1d8>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e004      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e002      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <HAL_GPIO_Init+0x1e2>
 8001500:	2300      	movs	r3, #0
 8001502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001504:	f002 0203 	and.w	r2, r2, #3
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	4093      	lsls	r3, r2
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	4313      	orrs	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001512:	492f      	ldr	r1, [pc, #188]	@ (80015d0 <HAL_GPIO_Init+0x2b0>)
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d006      	beq.n	800153a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800152c:	4b2c      	ldr	r3, [pc, #176]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	492b      	ldr	r1, [pc, #172]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
 8001538:	e006      	b.n	8001548 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800153a:	4b29      	ldr	r3, [pc, #164]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	43db      	mvns	r3, r3
 8001542:	4927      	ldr	r1, [pc, #156]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001544:	4013      	ands	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d006      	beq.n	8001562 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001554:	4b22      	ldr	r3, [pc, #136]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	4921      	ldr	r1, [pc, #132]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	60cb      	str	r3, [r1, #12]
 8001560:	e006      	b.n	8001570 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001562:	4b1f      	ldr	r3, [pc, #124]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	43db      	mvns	r3, r3
 800156a:	491d      	ldr	r1, [pc, #116]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800156c:	4013      	ands	r3, r2
 800156e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800157c:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	4917      	ldr	r1, [pc, #92]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	43db      	mvns	r3, r3
 8001592:	4913      	ldr	r1, [pc, #76]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 8001594:	4013      	ands	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01f      	beq.n	80015e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	490d      	ldr	r1, [pc, #52]	@ (80015e0 <HAL_GPIO_Init+0x2c0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
 80015b0:	e01f      	b.n	80015f2 <HAL_GPIO_Init+0x2d2>
 80015b2:	bf00      	nop
 80015b4:	10320000 	.word	0x10320000
 80015b8:	10310000 	.word	0x10310000
 80015bc:	10220000 	.word	0x10220000
 80015c0:	10210000 	.word	0x10210000
 80015c4:	10120000 	.word	0x10120000
 80015c8:	10110000 	.word	0x10110000
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010000 	.word	0x40010000
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <HAL_GPIO_Init+0x2f4>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	4909      	ldr	r1, [pc, #36]	@ (8001614 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	3301      	adds	r3, #1
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	f47f ae96 	bne.w	8001334 <HAL_GPIO_Init+0x14>
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	372c      	adds	r7, #44	@ 0x2c
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	887b      	ldrh	r3, [r7, #2]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	e001      	b.n	800163a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	807b      	strh	r3, [r7, #2]
 8001652:	4613      	mov	r3, r2
 8001654:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001656:	787b      	ldrb	r3, [r7, #1]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165c:	887a      	ldrh	r2, [r7, #2]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001662:	e003      	b.n	800166c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	041a      	lsls	r2, r3, #16
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	611a      	str	r2, [r3, #16]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001688:	887a      	ldrh	r2, [r7, #2]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	041a      	lsls	r2, r3, #16
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43d9      	mvns	r1, r3
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	400b      	ands	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	611a      	str	r2, [r3, #16]
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e272      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8087 	beq.w	80017d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016c8:	4b92      	ldr	r3, [pc, #584]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	d00c      	beq.n	80016ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d4:	4b8f      	ldr	r3, [pc, #572]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d112      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
 80016e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ec:	d10b      	bne.n	8001706 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ee:	4b89      	ldr	r3, [pc, #548]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d06c      	beq.n	80017d4 <HAL_RCC_OscConfig+0x12c>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d168      	bne.n	80017d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e24c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x76>
 8001710:	4b80      	ldr	r3, [pc, #512]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a7f      	ldr	r2, [pc, #508]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e02e      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x98>
 8001726:	4b7b      	ldr	r3, [pc, #492]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a7a      	ldr	r2, [pc, #488]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b78      	ldr	r3, [pc, #480]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a77      	ldr	r2, [pc, #476]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e01d      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0xbc>
 800174a:	4b72      	ldr	r3, [pc, #456]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a71      	ldr	r2, [pc, #452]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b6f      	ldr	r3, [pc, #444]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a6e      	ldr	r2, [pc, #440]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0xd4>
 8001764:	4b6b      	ldr	r3, [pc, #428]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a6a      	ldr	r2, [pc, #424]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b68      	ldr	r3, [pc, #416]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a67      	ldr	r2, [pc, #412]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001776:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800177a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fcb4 	bl	80010f0 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7ff fcb0 	bl	80010f0 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	@ 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e200      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b5d      	ldr	r3, [pc, #372]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0xe4>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fca0 	bl	80010f0 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b4:	f7ff fc9c 	bl	80010f0 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b64      	cmp	r3, #100	@ 0x64
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e1ec      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c6:	4b53      	ldr	r3, [pc, #332]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x10c>
 80017d2:	e000      	b.n	80017d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d063      	beq.n	80018aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d00b      	beq.n	8001806 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ee:	4b49      	ldr	r3, [pc, #292]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d11c      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
 80017fa:	4b46      	ldr	r3, [pc, #280]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	4b43      	ldr	r3, [pc, #268]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d001      	beq.n	800181e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e1c0      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181e:	4b3d      	ldr	r3, [pc, #244]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4939      	ldr	r1, [pc, #228]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001832:	e03a      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800183c:	4b36      	ldr	r3, [pc, #216]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fc55 	bl	80010f0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fc51 	bl	80010f0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1a1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	4b2d      	ldr	r3, [pc, #180]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4927      	ldr	r1, [pc, #156]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 8001878:	4313      	orrs	r3, r2
 800187a:	600b      	str	r3, [r1, #0]
 800187c:	e015      	b.n	80018aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b26      	ldr	r3, [pc, #152]	@ (8001918 <HAL_RCC_OscConfig+0x270>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fc34 	bl	80010f0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff fc30 	bl	80010f0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e180      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03a      	beq.n	800192c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d019      	beq.n	80018f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <HAL_RCC_OscConfig+0x274>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c4:	f7ff fc14 	bl	80010f0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fc10 	bl	80010f0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e160      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	4b0d      	ldr	r3, [pc, #52]	@ (8001914 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 fa9c 	bl	8001e28 <RCC_Delay>
 80018f0:	e01c      	b.n	800192c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	@ (800191c <HAL_RCC_OscConfig+0x274>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fbfa 	bl	80010f0 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fe:	e00f      	b.n	8001920 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fbf6 	bl	80010f0 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d908      	bls.n	8001920 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e146      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420000 	.word	0x42420000
 800191c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001920:	4b92      	ldr	r3, [pc, #584]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e9      	bne.n	8001900 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80a6 	beq.w	8001a86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10d      	bne.n	8001966 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b88      	ldr	r3, [pc, #544]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a87      	ldr	r2, [pc, #540]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b85      	ldr	r3, [pc, #532]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b82      	ldr	r3, [pc, #520]	@ (8001b70 <HAL_RCC_OscConfig+0x4c8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d118      	bne.n	80019a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b7f      	ldr	r3, [pc, #508]	@ (8001b70 <HAL_RCC_OscConfig+0x4c8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7e      	ldr	r2, [pc, #504]	@ (8001b70 <HAL_RCC_OscConfig+0x4c8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff fbb7 	bl	80010f0 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001986:	f7ff fbb3 	bl	80010f0 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b64      	cmp	r3, #100	@ 0x64
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e103      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001998:	4b75      	ldr	r3, [pc, #468]	@ (8001b70 <HAL_RCC_OscConfig+0x4c8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x312>
 80019ac:	4b6f      	ldr	r3, [pc, #444]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	e02d      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x334>
 80019c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	6a1b      	ldr	r3, [r3, #32]
 80019c6:	4a69      	ldr	r2, [pc, #420]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6213      	str	r3, [r2, #32]
 80019ce:	4b67      	ldr	r3, [pc, #412]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	4a66      	ldr	r2, [pc, #408]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	f023 0304 	bic.w	r3, r3, #4
 80019d8:	6213      	str	r3, [r2, #32]
 80019da:	e01c      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x356>
 80019e4:	4b61      	ldr	r3, [pc, #388]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a60      	ldr	r2, [pc, #384]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x36e>
 80019fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a5a      	ldr	r2, [pc, #360]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fb67 	bl	80010f0 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	e00a      	b.n	8001a3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f7ff fb63 	bl	80010f0 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0b1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0ee      	beq.n	8001a26 <HAL_RCC_OscConfig+0x37e>
 8001a48:	e014      	b.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb51 	bl	80010f0 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fb4d 	bl	80010f0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e09b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ee      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a74:	7dfb      	ldrb	r3, [r7, #23]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d105      	bne.n	8001a86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a90:	4b36      	ldr	r3, [pc, #216]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d061      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d146      	bne.n	8001b32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa4:	4b33      	ldr	r3, [pc, #204]	@ (8001b74 <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fb21 	bl	80010f0 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff fb1d 	bl	80010f0 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e06d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac4:	4b29      	ldr	r3, [pc, #164]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1f0      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4921      	ldr	r1, [pc, #132]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a19      	ldr	r1, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	430b      	orrs	r3, r1
 8001afe:	491b      	ldr	r1, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff faf1 	bl	80010f0 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff faed 	bl	80010f0 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e03d      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x46a>
 8001b30:	e035      	b.n	8001b9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_RCC_OscConfig+0x4cc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fada 	bl	80010f0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff fad6 	bl	80010f0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e026      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x498>
 8001b5e:	e01e      	b.n	8001b9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e019      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40007000 	.word	0x40007000
 8001b74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_OscConfig+0x500>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d106      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0d0      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d910      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b67      	ldr	r3, [pc, #412]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 0207 	bic.w	r2, r3, #7
 8001bd6:	4965      	ldr	r1, [pc, #404]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b63      	ldr	r3, [pc, #396]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0b8      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c20:	4b53      	ldr	r3, [pc, #332]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2c:	4b50      	ldr	r3, [pc, #320]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	494d      	ldr	r1, [pc, #308]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d040      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b47      	ldr	r3, [pc, #284]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d115      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e07f      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e073      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06b      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f023 0203 	bic.w	r2, r3, #3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	4936      	ldr	r1, [pc, #216]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff fa28 	bl	80010f0 <HAL_GetTick>
 8001ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca4:	f7ff fa24 	bl	80010f0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e053      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	4b2d      	ldr	r3, [pc, #180]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 020c 	and.w	r2, r3, #12
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d1eb      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ccc:	4b27      	ldr	r3, [pc, #156]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d210      	bcs.n	8001cfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 0207 	bic.w	r2, r3, #7
 8001ce2:	4922      	ldr	r1, [pc, #136]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_RCC_ClockConfig+0x1c0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e032      	b.n	8001d62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4916      	ldr	r1, [pc, #88]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d26:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	490e      	ldr	r1, [pc, #56]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d3a:	f000 f821 	bl	8001d80 <HAL_RCC_GetSysClockFreq>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	091b      	lsrs	r3, r3, #4
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	490a      	ldr	r1, [pc, #40]	@ (8001d74 <HAL_RCC_ClockConfig+0x1c8>)
 8001d4c:	5ccb      	ldrb	r3, [r1, r3]
 8001d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d52:	4a09      	ldr	r2, [pc, #36]	@ (8001d78 <HAL_RCC_ClockConfig+0x1cc>)
 8001d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <HAL_RCC_ClockConfig+0x1d0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f986 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40022000 	.word	0x40022000
 8001d70:	40021000 	.word	0x40021000
 8001d74:	0800268c 	.word	0x0800268c
 8001d78:	20000068 	.word	0x20000068
 8001d7c:	2000006c 	.word	0x2000006c

08001d80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x30>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d003      	beq.n	8001db6 <HAL_RCC_GetSysClockFreq+0x36>
 8001dae:	e027      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001db0:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001db2:	613b      	str	r3, [r7, #16]
      break;
 8001db4:	e027      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0c9b      	lsrs	r3, r3, #18
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dc0:	5cd3      	ldrb	r3, [r2, r3]
 8001dc2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d010      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	0c5b      	lsrs	r3, r3, #17
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001de2:	fb03 f202 	mul.w	r2, r3, r2
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e004      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	613b      	str	r3, [r7, #16]
      break;
 8001dfe:	e002      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e02:	613b      	str	r3, [r7, #16]
      break;
 8001e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e06:	693b      	ldr	r3, [r7, #16]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	007a1200 	.word	0x007a1200
 8001e1c:	0800269c 	.word	0x0800269c
 8001e20:	080026ac 	.word	0x080026ac
 8001e24:	003d0900 	.word	0x003d0900

08001e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <RCC_Delay+0x34>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <RCC_Delay+0x38>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a5b      	lsrs	r3, r3, #9
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e44:	bf00      	nop
  }
  while (Delay --);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	60fa      	str	r2, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <RCC_Delay+0x1c>
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000068 	.word	0x20000068
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e041      	b.n	8001efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d106      	bne.n	8001e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff f852 	bl	8000f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2202      	movs	r2, #2
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4610      	mov	r0, r2
 8001ea4:	f000 fa56 	bl	8002354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e035      	b.n	8001f88 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <HAL_TIM_Base_Start_IT+0x90>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_TIM_Base_Start_IT+0x4e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f46:	d004      	beq.n	8001f52 <HAL_TIM_Base_Start_IT+0x4e>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	@ (8001f98 <HAL_TIM_Base_Start_IT+0x94>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d111      	bne.n	8001f76 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b06      	cmp	r3, #6
 8001f62:	d010      	beq.n	8001f86 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	e007      	b.n	8001f86 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40000400 	.word	0x40000400

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d020      	beq.n	8002000 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01b      	beq.n	8002000 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0202 	mvn.w	r2, #2
 8001fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f998 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f98b 	bl	800230a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f99a 	bl	800232e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b00      	cmp	r3, #0
 8002008:	d020      	beq.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f972 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f965 	bl	800230a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f974 	bl	800232e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d020      	beq.n	8002098 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0208 	mvn.w	r2, #8
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f94c 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f93f 	bl	800230a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f94e 	bl	800232e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d020      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0210 	mvn.w	r2, #16
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2208      	movs	r2, #8
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f926 	bl	800231c <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f919 	bl	800230a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f928 	bl	800232e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00c      	beq.n	8002108 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f06f 0201 	mvn.w	r2, #1
 8002100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe fe7c 	bl	8000e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa6f 	bl	800260a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00c      	beq.n	8002150 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8f8 	bl	8002340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 0320 	and.w	r3, r3, #32
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00c      	beq.n	8002174 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f06f 0220 	mvn.w	r2, #32
 800216c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa42 	bl	80025f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_TIM_ConfigClockSource+0x1c>
 8002194:	2302      	movs	r3, #2
 8002196:	e0b4      	b.n	8002302 <HAL_TIM_ConfigClockSource+0x186>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d0:	d03e      	beq.n	8002250 <HAL_TIM_ConfigClockSource+0xd4>
 80021d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d6:	f200 8087 	bhi.w	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 80021da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021de:	f000 8086 	beq.w	80022ee <HAL_TIM_ConfigClockSource+0x172>
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e6:	d87f      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 80021e8:	2b70      	cmp	r3, #112	@ 0x70
 80021ea:	d01a      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0xa6>
 80021ec:	2b70      	cmp	r3, #112	@ 0x70
 80021ee:	d87b      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 80021f0:	2b60      	cmp	r3, #96	@ 0x60
 80021f2:	d050      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x11a>
 80021f4:	2b60      	cmp	r3, #96	@ 0x60
 80021f6:	d877      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 80021f8:	2b50      	cmp	r3, #80	@ 0x50
 80021fa:	d03c      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xfa>
 80021fc:	2b50      	cmp	r3, #80	@ 0x50
 80021fe:	d873      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	2b40      	cmp	r3, #64	@ 0x40
 8002202:	d058      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002204:	2b40      	cmp	r3, #64	@ 0x40
 8002206:	d86f      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002208:	2b30      	cmp	r3, #48	@ 0x30
 800220a:	d064      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x15a>
 800220c:	2b30      	cmp	r3, #48	@ 0x30
 800220e:	d86b      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002210:	2b20      	cmp	r3, #32
 8002212:	d060      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002214:	2b20      	cmp	r3, #32
 8002216:	d867      	bhi.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d05c      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x15a>
 800221c:	2b10      	cmp	r3, #16
 800221e:	d05a      	beq.n	80022d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	e062      	b.n	80022e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002232:	f000 f96a 	bl	800250a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	609a      	str	r2, [r3, #8]
      break;
 800224e:	e04f      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002260:	f000 f953 	bl	800250a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e03c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002282:	461a      	mov	r2, r3
 8002284:	f000 f8ca 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2150      	movs	r1, #80	@ 0x50
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f921 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002294:	e02c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 f8e8 	bl	8002478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2160      	movs	r1, #96	@ 0x60
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f911 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022b4:	e01c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022c2:	461a      	mov	r2, r3
 80022c4:	f000 f8aa 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2140      	movs	r1, #64	@ 0x40
 80022ce:	4618      	mov	r0, r3
 80022d0:	f000 f901 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022d4:	e00c      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	4610      	mov	r0, r2
 80022e2:	f000 f8f8 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022e6:	e003      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e000      	b.n	80022f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
	...

08002354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a2b      	ldr	r2, [pc, #172]	@ (8002414 <TIM_Base_SetConfig+0xc0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d007      	beq.n	800237c <TIM_Base_SetConfig+0x28>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002372:	d003      	beq.n	800237c <TIM_Base_SetConfig+0x28>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a28      	ldr	r2, [pc, #160]	@ (8002418 <TIM_Base_SetConfig+0xc4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d108      	bne.n	800238e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a20      	ldr	r2, [pc, #128]	@ (8002414 <TIM_Base_SetConfig+0xc0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d007      	beq.n	80023a6 <TIM_Base_SetConfig+0x52>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800239c:	d003      	beq.n	80023a6 <TIM_Base_SetConfig+0x52>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <TIM_Base_SetConfig+0xc4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d108      	bne.n	80023b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a0d      	ldr	r2, [pc, #52]	@ (8002414 <TIM_Base_SetConfig+0xc0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d103      	bne.n	80023ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f023 0201 	bic.w	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]
  }
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400

0800241c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f023 0201 	bic.w	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f023 030a 	bic.w	r3, r3, #10
 8002458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0210 	bic.w	r2, r3, #16
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	031b      	lsls	r3, r3, #12
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4313      	orrs	r3, r2
 80024be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	621a      	str	r2, [r3, #32]
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f043 0307 	orr.w	r3, r3, #7
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250a:	b480      	push	{r7}
 800250c:	b087      	sub	sp, #28
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002524:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	021a      	lsls	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	431a      	orrs	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e041      	b.n	80025e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025ac:	d004      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a10      	ldr	r2, [pc, #64]	@ (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10c      	bne.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40000400 	.word	0x40000400

080025f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <memset>:
 800261c:	4603      	mov	r3, r0
 800261e:	4402      	add	r2, r0
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	f803 1b01 	strb.w	r1, [r3], #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2600      	movs	r6, #0
 8002630:	4d0c      	ldr	r5, [pc, #48]	@ (8002664 <__libc_init_array+0x38>)
 8002632:	4c0d      	ldr	r4, [pc, #52]	@ (8002668 <__libc_init_array+0x3c>)
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	f000 f81a 	bl	8002674 <_init>
 8002640:	2600      	movs	r6, #0
 8002642:	4d0a      	ldr	r5, [pc, #40]	@ (800266c <__libc_init_array+0x40>)
 8002644:	4c0a      	ldr	r4, [pc, #40]	@ (8002670 <__libc_init_array+0x44>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026b0 	.word	0x080026b0
 8002668:	080026b0 	.word	0x080026b0
 800266c:	080026b0 	.word	0x080026b0
 8002670:	080026b4 	.word	0x080026b4

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
